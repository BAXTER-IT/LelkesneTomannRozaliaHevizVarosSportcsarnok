@use '../../../styles.scss' as global;

:host {
  display: block;
  max-width: 600px; // Limit form width for better readability
  margin: 0 auto; // Center the form
  padding: calc(var(--spacing-unit) * 3);
  background-color: var(--surface-color);
  border-radius: var(--border-radius);
  box-shadow: var(--box-shadow);
}

h2 {
  text-align: center;
  margin-bottom: calc(var(--spacing-unit) * 2.5);
  color: var(--text-color);
  font-size: 1.5rem;
}

form {
  display: flex;
  flex-direction: column;
  gap: calc(var(--spacing-unit) * 2);

  div {
    display: flex;
    flex-direction: column; // Stack label and input vertically
    gap: calc(var(--spacing-unit) * 0.75);
  }

  label {
    font-weight: 500;
    color: var(--muted-text-color);
    font-size: 0.9rem;
  }

  input[type="text"],
  input[type="number"],
  select {
    padding: calc(var(--spacing-unit) * 1.25);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
    font-size: 1rem;
    width: 100%;
    background-color: var(--background-color); // Light background for inputs
    color: var(--text-color);

    &:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 2px lighten(global.$primary-color-value, 30%);
    }
  }

  select {
    appearance: none; // Basic reset for select
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath fill='none' stroke='%23333' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M2 5l6 6 6-6'/%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: right calc(var(--spacing-unit) * 1.5) center;
    background-size: 1em;
    padding-right: calc(var(--spacing-unit) * 4); // Make space for arrow
  }

  button[type="submit"] {
    margin-top: var(--spacing-unit); // Add some space before the button
    padding: calc(var(--spacing-unit) * 1.5) calc(var(--spacing-unit) * 2.5);
    font-size: 1.1rem;
    font-weight: 500;

    // Specific styling for BUY/SELL buttons could be added if type is dynamic
    // For now, using primary color
  }
}

.error,
.success {
  text-align: center;
  padding: var(--spacing-unit);
  margin-top: var(--spacing-unit);
  border-radius: var(--border-radius);
  font-size: 0.9rem;
}

.error {
  color: var(--danger-color);
  background-color: lighten(global.$danger-color-value, 35%);
  border: 1px solid var(--danger-color);
}

.success {
  color: var(--success-color);
  background-color: lighten(global.$success-color-value, 40%);
  border: 1px solid var(--success-color);
}

.order-type-selector {
  // Reverted: This div will now follow default block behavior or form's flex-column for its children
  label { // This is the main "Order Type:" label for "Order Type:"
    display: block; // Ensure it's on its own line
    margin-bottom: calc(var(--spacing-unit) * 0.75); // Space below it, before the button group
  }
}

.radio-button-group {
  display: flex;
  flex-direction: row; // Explicitly ensure horizontal layout for the buttons
  gap: calc(var(--spacing-unit) * 1); // Space between "buttons"

  input[type="radio"] {
    display: none; // Hide the actual radio button
  }

  label.radio-button { // Style for the clickable labels
    padding: calc(var(--spacing-unit) * 1.25) calc(var(--spacing-unit) * 2);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
    cursor: pointer;
    transition: background-color 0.2s ease-in-out, border-color 0.2s ease-in-out, color 0.2s ease-in-out;
    background-color: var(--surface-color); // Default state
    color: var(--text-color);
    font-weight: 500;
    text-align: center;
    // flex-grow: 1; // Removed to let buttons size to content initially
    // If they should still fill available horizontal space equally:
    // flex: 1 1 auto; or just flex-grow: 1 if parent has defined width.
    // For now, let them size naturally.

    &:hover {
      border-color: var(--primary-color-dark);
      background-color: var(--neutral-color-xlight);
    }
  }

  input[type="radio"]:checked + label.radio-button {
    background-color: var(--primary-color);
    color: var(--button-text-color); // Assuming white or light text on primary color
    border-color: var(--primary-color);
    font-weight: bold;
  }

  // Adjustments for disabled state on price input when market is selected
  input[type="number"]:disabled,
  input[type="number"]:read-only {
    background-color: var(--neutral-color-xlight); // Lighter background for disabled
    color: var(--muted-text-color); // Greyed out text
    cursor: not-allowed;
    opacity: 0.8; // Slightly more opaque
    border-style: dashed; // Different border to indicate non-interactive
    // Remove box-shadow on focus for disabled inputs if it was applied globally
    &:focus {
      box-shadow: none;
      border-color: var(--border-color); // Keep border color standard for disabled
    }
  }
}

// Responsive adjustments
@media (max-width: 768px) {
  :host {
    padding: calc(var(--spacing-unit) * 2);
  }

  h2 {
    font-size: 1.3rem;
  }
}
